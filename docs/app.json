[{"name":"server.R","content":"trim_link <- function(data) {\n  gsub(\n    \"\\\\_$\", \"\",\n    gsub(\n      \"\\\\_{2,}\", \"_\",\n      gsub(\"[^a-zA-Z0-9]\", \"_\", trimws(data))\n    )\n  )\n}\n\n\nserver <- function(input, output) {\n  qr <- shiny::reactive({\n    if (input$qr_type == \"text\") {\n      out <- qrcode::qr_code(trimws(input$link), ecl = input$ecl)\n      if (!is.null(input$logo)) {\n        out <- qrcode::add_logo(\n          code = qrcode::qr_code(trimws(input$link), ecl = list(\"s\"=\"M\", \"m\"=\"Q\",\"l\"=\"H\")[[input$logo_size]]),\n          logo = input$logo$datapath,\n          ecl = \"L\",\n          hjust = input$hjust,\n          vjust = input$vjust\n        )\n      }\n    } else if (input$qr_type == \"wifi\") {\n      \n      if (input$encryption %in% c(\"WPA\",\"WEP\")) enc <- input$encryption else enc <- NULL\n      out <- qrcode::qr_wifi(\n        ssid = input$ssid, \n        encryption = enc, \n        key = input$key, \n        hidden = input$hidden,\n        ecl = input$ecl_wifi\n      )\n    }\n    out\n  })\n\n  output$plot <- shiny::renderPlot({\n    plot(qr())\n  })\n\n  # downloadHandler contains 2 arguments as functions, namely filename, content\n  output$save_svg <- shiny::downloadHandler(\n    filename = function() {\n      if (input$qr_type == \"text\") {\n        paste0(trim_link(input$link), \".svg\")\n      } else if (input$qr_type == \"wifi\") {\n        paste0(trim_link(input$ssid), \".svg\")\n      }\n    },\n    # content is a function with argument file. content writes the plot to the device\n    content = function(file) {\n      qrcode::generate_svg(\n        qrcode = qr(),\n        # foreground = input$ftcolor,\n        # background = input$bgcolor,\n        filename = file, show = FALSE\n      )\n    }\n  )\n\n  # downloadHandler contains 2 arguments as functions, namely filename, content\n  output$save_png <- shiny::downloadHandler(\n    filename = function() {\n      if (input$qr_type == \"text\") {\n        paste0(trim_link(input$link), \".png\")\n      } else if (input$qr_type == \"wifi\") {\n        paste0(trim_link(input$ssid), \".png\")\n      }\n    },\n    # content is a function with argument file. content writes the plot to the device\n    content = function(file) {\n      png(filename = file)\n      plot(qr())\n      dev.off()\n    }\n  )\n}\n","type":"text"},{"name":"ui.R","content":"ui <- shiny::fluidPage(\n  shiny::titlePanel(\"Generate your own QR code\",\n    windowTitle = \"QR code SVG/PNG export\"\n  ),\n  shiny::sidebarLayout(\n    shiny::sidebarPanel(\n      shiny::radioButtons(\n        inputId = \"qr_type\",\n        label = \"What kind of QR code?\",\n        selected = \"text\",\n        choices = list(\n          \"Standard (link)\" = \"text\",\n          \"Wifi credentials\" = \"wifi\"\n        )\n      ),\n      shiny::tags$hr(),\n      shiny::conditionalPanel(\n        condition = \"input.qr_type=='text'\",\n        shiny::textInput(\n          inputId = \"link\",\n          label = \"Enter Link here\",\n          value = \"https://agdamsbo.github.io/qr.live/\"\n        ),\n        shiny::radioButtons(\n          inputId = \"ecl\",\n          label = \"Error correction\",\n          selected = \"M\",\n          choices = list(\n            \"Low (7 %)\" = \"L\",\n            \"Medium (15 %)\" = \"M\",\n            \"Q (25 %)\" = \"Q\",\n            \"High (30 %)\" = \"H\"\n          )\n        ),\n        shiny::radioButtons(\n          inputId = \"logo_add\",\n          label = \"Add logo?\",\n          selected = \"n\",\n          choices = list(\n            \"Yes\" = \"y\",\n            \"No\" = \"n\"\n          )\n        ),\n        shiny::conditionalPanel(\n          condition = \"input.logo_add=='y'\",\n          shiny::fileInput(\n            inputId = \"logo\",\n            label = \"Upload logo file (optional)\",\n            multiple = FALSE,\n            accept = c(\n              \"png\",\n              \"svg\",\n              \"jpeg\",\n              \"jpg\"\n            )\n          ),\n          shiny::radioButtons(\n            inputId = \"logo_size\",\n            label = \"Logo size (optional)\",\n            selected = \"l\",\n            choices = list(\n              \"Small\" = \"s\",\n              \"Medium\" = \"m\",\n              \"Large\" = \"l\"\n            )\n          ),\n          shiny::radioButtons(\n            inputId = \"hjust\",\n            label = \"Horisontal position\",\n            selected = \"l\",\n            choices = list(\n              \"Right\" = \"r\",\n              \"Center\" = \"c\",\n              \"Left\" = \"l\"\n            )\n          ),\n          shiny::radioButtons(\n            inputId = \"vjust\",\n            label = \"Vertical position\",\n            selected = \"l\",\n            choices = list(\n              \"Top\" = \"t\",\n              \"Center\" = \"c\",\n              \"Buttom\" = \"b\"\n            )\n          )\n        )\n      ),\n      shiny::conditionalPanel(\n        condition = \"input.qr_type=='wifi'\",\n        shiny::textInput(\n          inputId = \"ssid\",\n          label = \"Network name (SSID)\",\n          value = \"hello\"\n        ),\n        shiny::textInput(\n          inputId = \"key\",\n          label = \"Password\",\n          placeholder = \"pass\"\n        ),\n        shiny::radioButtons(\n          inputId = \"encryption\",\n          label = \"Encryption\",\n          selected = \"WPA\",\n          choices = list(\n            \"WPA/WPA2/WPA3\" = \"WPA\",\n            \"WEP\" = \"WEP\",\n            \"None\" = \"no\"\n          )\n        ),\n        shiny::radioButtons(\n          inputId = \"hidden\",\n          label = \"Hidden?\",\n          selected = FALSE,\n          choices = list(\n            \"Yes\" = TRUE,\n            \"No\" = FALSE\n          )\n        ),\n        shiny::radioButtons(\n          inputId = \"ecl_wifi\",\n          label = \"Error correction\",\n          selected = \"L\",\n          choices = list(\n            \"Low (7 %)\" = \"L\",\n            \"Medium (15 %)\" = \"M\",\n            \"High (25 %)\" = \"Q\",\n            \"Extra High (30 %)\" = \"H\"\n          )\n        )\n      ),\n      # shiny::textInput(inputId = \"bgcolor\",\n      #           label = \"SVG Background Color\",\n      #           value = \"white\"),\n      # shiny::textInput(inputId = \"ftcolor\",\n      #           label = \"SVG QR Color\",\n      #           value = \"black\"),\n      # shiny::h6(\"Use CSS colors. Use 'none' for transparent.\"),\n      # shiny::tags$hr(),\n      shiny::downloadButton(\n        outputId = \"save_svg\",\n        label = \"Download SVG\"\n      ),\n      shiny::downloadButton(\n        outputId = \"save_png\",\n        label = \"Download PNG\"\n      )\n    ),\n    shiny::mainPanel(\n      shiny::plotOutput(\"plot\")\n    )\n  )\n)\n","type":"text"}]
