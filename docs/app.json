[{"name":"server.R","content":"server <- function(input, output, session) {\n  # require(cognitive.index.lookup)\n  # list.files(here::here(\"R\"),full.names = TRUE) |> lapply(source)\n  # source(here::here(\"R/index_from_raw.R\"))\n  # source(here::here(\"R/plot_index.R\"))\n  # source(here::here(\"R/read_file.R\"))\n  # index_table <- read.csv(here::here(\"data-raw/index_table.csv\"))\n  \n  library(tidyr)\n  library(patchwork)\n  library(ggplot2)\n  library(dplyr)\n  library(tidyselect)\n  library(openxlsx2)\n  library(readr)\n  library(purrr)\n  \n  # source(\"https://raw.githubusercontent.com/agdamsbo/cognitive.index.lookup/main/R/index_from_raw.R\")\n  # source(\"https://raw.githubusercontent.com/agdamsbo/cognitive.index.lookup/main/R/plot_index.R\")\n  # source(\"https://raw.githubusercontent.com/agdamsbo/cognitive.index.lookup/main/R/read_file.R\")\n  source(\"https://raw.githubusercontent.com/agdamsbo/cognitive.index.lookup/main/R/functions.R\")\n  index_table <- read.csv(\"https://raw.githubusercontent.com/agdamsbo/cognitive.index.lookup/main/data-raw/index_table.csv\")\n  \n  # To allow shinylive running, functions are directly sourced:\n  # source(\"https://raw.githubusercontent.com/agdamsbo/cognitive.index.lookup/main/R/index_from_raw.R\")\n  # source(\"https://raw.githubusercontent.com/agdamsbo/cognitive.index.lookup/main/R/plot_index.R\")\n  \n  # source(here::here(\"R/index_from_raw.R\"))\n  # source(here::here(\"R/plot_index.R\"))\n  \n    \n  dat <- shiny::reactive({\n    data.frame(\n      \"id\" = \"1\",\n      \"ab\" = input$ab,\n      \"age\" = input$age,\n      \"imm\" = input$rs1,\n      \"vis\" = input$rs2,\n      \"ver\" = input$rs3,\n      \"att\" = input$rs4,\n      \"del\" = input$rs5,\n      stringsAsFactors = FALSE\n    )\n    \n  })\n  \n  dat_u <- shiny::reactive({\n    # input$file1 will be NULL initially. After the user selects\n    # and uploads a file, head of that data file by default,\n    # or all rows if selected, will be shown.\n    \n    \n    shiny::req(input$file1)\n    \n    # read.csv(input$file1$datapath,\n    #                header = input$header,\n    #                sep = input$sep,\n    #                quote = input$quote\n    # ) \n    read_input(input$file1$datapath)\n  })\n  \n  dat_f <- shiny::reactive({\n    if (input$type == 1) {\n      dat()\n    } else if (input$type == 2) {\n      dat_u()\n    }\n  })\n  \n  index_p <- shiny::reactive({\n    dat_f() |> index_from_raw(\n      indx = index_table,\n      version.col = \"ab\",\n      age.col = \"age\",\n      raw_columns = c(\"imm\", \"vis\", \"ver\", \"att\", \"del\")\n    )\n  })\n  \n  \n  output$ndx.tbl <- shiny::renderTable({\n    index_p() |>\n      dplyr::select(\"id\", \"ab\", dplyr::contains(\"_is\")) |>\n      setNames(c(\"ID\", \"ab\", \"imm\", \"vis\", \"ver\", \"att\", \"del\", \"Total\"))\n  })\n  \n  output$per.tbl <- shiny::renderTable({\n    index_p() |>\n      dplyr::select(\"id\", \"ab\", dplyr::contains(\"_per\")) |>\n      setNames(c(\"ID\", \"ab\", \"imm\", \"vis\", \"ver\", \"att\", \"del\", \"Total\"))\n  })\n  \n  \n  output$ndx.plt <- shiny::renderPlot({\n    index_p() |> plot_index(sub_plot = \"_is\", facet.by = \"ab\")\n  })\n  \n  output$per.plt <- shiny::renderPlot({\n    index_p() |> plot_index(sub_plot = \"_per\", facet.by = \"ab\")\n  })\n  \n  # Downloadable csv of selected dataset ----\n  output$downloadData <- shiny::downloadHandler(\n    filename = \"index_lookup.csv\",\n    content = function(file) {\n      write.csv(index_p(), file, row.names = FALSE)\n    }\n  )\n}","type":"text"},{"name":"ui.R","content":"require(shiny)\n# require(ggplot2)\n# source(\"https://raw.githubusercontent.com/agdamsbo/cognitive.index.lookup/main/R/index_from_raw.R\")\n# source(\"https://raw.githubusercontent.com/agdamsbo/cognitive.index.lookup/main/R/plot_index.R\")\n# source(here::here(\"R/index_from_raw.R\"))\n# source(here::here(\"R/plot_index.R\"))\n\nui <- fluidPage(\n  \n  ## -----------------------------------------------------------------------------\n  ## Application title\n  ## -----------------------------------------------------------------------------\n  titlePanel(\"Calculating cognitive index scores in multidimensional testing.\",\n             windowTitle = \"Cognitive test index calculator\"\n  ),\n  h5(\"Please note this calculator is only meant as a proof of concept for educational purposes,\n     and the author will take no responsibility for the results of the calculator.\n     Uploaded data is not kept, but please, do not upload any sensitive data.\"),\n  \n  ## -----------------------------------------------------------------------------\n  ## Side panel\n  ## -----------------------------------------------------------------------------\n  \n  sidebarPanel(\n    h4(\"Test resultsData format\"),\n    radioButtons(\n      inputId = \"type\",\n      label = \"Data type\",\n      inline = FALSE,\n      choiceNames = c(\n        \"Single entry\",\n        \"File upload\"\n      ),\n      choiceValues = c(1, 2)\n    ),\n    \n    # Horizontal line ----\n    tags$hr(),\n    \n    ## -----------------------------------------------------------------------------\n    ## Single entry\n    ## -----------------------------------------------------------------------------\n    \n    conditionalPanel(\n      condition = \"input.type==1\",\n      numericInput(\n        inputId = \"age\",\n        label = \"Age\",\n        value = 60\n      ),\n      radioButtons(\n        inputId = \"ab\",\n        label = \"Test version (A/B)\",\n        inline = FALSE,\n        choiceNames = c(\n          \"A\",\n          \"B\"\n        ),\n        choiceValues = c(\"1\", \"2\")\n      ),\n      numericInput(\n        inputId = \"rs1\",\n        label = \"Immediate memory\",\n        value = 35\n      ),\n      numericInput(\n        inputId = \"rs2\",\n        label = \"Visuospatial functions\",\n        value = 35\n      ),\n      numericInput(\n        inputId = \"rs3\",\n        label = \"Verbal functions\",\n        value = 30\n      ),\n      numericInput(\n        inputId = \"rs4\",\n        label = \"Attention\",\n        value = 35\n      ),\n      numericInput(\n        inputId = \"rs5\",\n        label = \"Delayed memory\",\n        value = 40\n      )\n    ),\n    \n    ## -----------------------------------------------------------------------------\n    ## File upload\n    ## -----------------------------------------------------------------------------\n    \n    conditionalPanel(\n      condition = \"input.type==2\",\n      \n      # Input: Select a file ----\n      \n      fileInput(\"file1\", \"Choose CSV File\",\n                multiple = FALSE,\n                accept = c(\n                  \"text/csv\",\n                  \"text/comma-separated-values,text/plain\",\n                  \".csv\",\n                  \".xlsx\",\n                  \".xls\"\n                )\n      ),\n      h6(\"Columns: id, ab, age, imm, vis, ver, att, del.\")\n      # ,\n      \n      # Horizontal line ----\n      # tags$hr(),\n      \n      # Input: Checkbox if file has header ----\n      # checkboxInput(\"header\", \"Header\", TRUE),\n      \n      # Input: Select separator ----\n      # radioButtons(\"sep\", \"Separator\",\n      #              choices = c(\n      #                Comma = \",\",\n      #                Semicolon = \";\",\n      #                Tab = \"\\t\"\n      #              ),\n      #              selected = \",\"\n      # ),\n      \n      # Input: Select quotes ----\n      # radioButtons(\"quote\", \"Quote\",\n      #              choices = c(\n      #                None = \"\",\n      #                \"Double Quote\" = '\"',\n      #                \"Single Quote\" = \"'\"\n      #              ),\n      #              selected = '\"'\n      # ),\n    ),\n    \n    \n    ## -----------------------------------------------------------------------------\n    ## Download output\n    ## -----------------------------------------------------------------------------\n    \n    # Horizontal line ----\n    tags$hr(),\n    h4(\"Download results\"),\n    \n    # Button\n    downloadButton(\"downloadData\", \"Download\")\n  ),\n  mainPanel(\n    tabsetPanel(\n      \n      ## -----------------------------------------------------------------------------\n      ## Summary tab\n      ## -----------------------------------------------------------------------------\n      tabPanel(\n        \"Summary\",\n        h3(\"Index Scores\"),\n        htmlOutput(\"ndx.tbl\", container = span),\n        h3(\"Percentiles\"),\n        htmlOutput(\"per.tbl\", container = span)\n      ),\n      \n      ## -----------------------------------------------------------------------------\n      ## Plots tab\n      ## -----------------------------------------------------------------------------\n      \n      tabPanel(\n        \"Plots\",\n        h3(\"Index Scores\"),\n        plotOutput(\"ndx.plt\"),\n        h3(\"Percentiles\"),\n        plotOutput(\"per.plt\")\n      )\n    )\n  )\n)","type":"text"}]
