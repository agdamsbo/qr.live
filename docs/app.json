[{"name":"server.R","content":"trim_link <- function(data) {\n  gsub(\n    \"\\\\_$\", \"\",\n    gsub(\n      \"\\\\_{2,}\", \"_\",\n      gsub(\"[^a-zA-Z0-9]\", \"_\", trimws(data))\n    )\n  )\n}\n\nserver <- function(input, output) {\n  tplot <- shiny::reactive({\n    qr <- qrcode::qr_code(trimws(input$link), ecl = \"M\")\n    plot(qr)\n  })\n  output$tplot <- shiny::renderPlot({\n    tplot()\n  })\n\n  # downloadHandler contains 2 arguments as functions, namely filename, content\n  output$save <- shiny::downloadHandler(\n    filename = function() {\n      paste0(trim_link(input$link), \".svg\")\n    },\n    # content is a function with argument file. content writes the plot to the device\n    content = function(file) {\n      qrcode::generate_svg(qrcode::qr_code(trimws(input$link), ecl = \"M\"), filename = file)\n    }\n  )\n}\n","type":"text"},{"name":"ui.R","content":"ui <- shiny::fluidPage(\n  shiny::sidebarLayout(\n    shiny::sidebarPanel(\n      \n      shiny::textInput(inputId = \"link\", label = \"Enter Link here\", value = \"andreas.gdamsbo.dk\"),\n      shiny::downloadButton(outputId = \"save\", label = \"Download QR\")\n    ),\n    shiny::mainPanel(\n      shiny::plotOutput(\"tplot\" ) \n    )\n  )\n)","type":"text"}]
