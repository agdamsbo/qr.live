[{"name":"server.R","content":"trim_link <- function(data) {\n  gsub(\n    \"\\\\_$\", \"\",\n    gsub(\n      \"\\\\_{2,}\", \"_\",\n      gsub(\"[^a-zA-Z0-9]\", \"_\", trimws(data))\n    )\n  )\n}\n\nserver <- function(input, output) {\n  \n  v <- shiny::reactiveValues(\n    plot = NULL\n  )\n\n  live_plot <- function(plot=v$plot, \n                        col = c(input$bgcolor, input$ftcolor)){\n    plot(x = plot, col=col)\n  }\n  \n  #####\n  #### Pre-filled functions for easier coding\n  #####\n  qr <- shiny::reactive({\n    live_qr_code <- function(x = input$link,\n                             ecl = input$ecl) {\n      qrcode::qr_code(\n        x = trimws(x),\n        ecl = ecl\n      )\n    }\n\n    live_qr_wifi <- function(ssid = input$ssid,\n                             encryption,\n                             key = input$key,\n                             hidden = input$hidden,\n                             ecl = input$ecl_wifi) {\n      qrcode::qr_wifi(\n        ssid = ssid,\n        encryption = encryption,\n        key = key,\n        hidden = hidden,\n        ecl = ecl\n      )\n    }\n\n    live_qr_logo <- function(code,\n                             logo = input$logo$datapath,\n                             ecl = \"L\",\n                             hjust = input$hjust,\n                             vjust = input$vjust) {\n      qrcode::add_logo(\n        code = code,\n        logo = logo,\n        ecl = ecl,\n        hjust = hjust,\n        vjust = vjust\n      )\n    }\n\n    #####\n    #### Generating code\n    #####\n\n    if (input$qr_type == \"text\") {\n      if (input$logo_add == \"n\") {\n        out <- live_qr_code()\n      } else if (input$logo_add == \"y\") {\n        out <- live_qr_logo(\n          code = live_qr_code(\n            ecl = list(\"s\" = \"M\", \"m\" = \"Q\", \"l\" = \"H\")[[input$logo_size]]\n          )\n        )\n      }\n    } else if (input$qr_type == \"wifi\") {\n      if (input$encryption %in% c(\"WPA\", \"WEP\")) enc <- input$encryption else enc <- NULL\n      if (input$logo_add == \"n\") {\n        out <- live_qr_wifi(encryption = enc)\n      } else if (input$logo_add == \"y\") {\n        out <- live_qr_logo(\n          code = live_qr_wifi(\n            encryption = enc,\n            ecl = list(\"s\" = \"M\", \"m\" = \"Q\", \"l\" = \"H\")[[input$logo_size]]\n          )\n        )\n      }\n    }\n    out\n  })\n\n  #####\n  #### Transfer for plot on button press\n  #####\n  shiny::observeEvent(input$render, {\n    v$plot <- qr()\n  })\n\n  #####\n  #### Render available plot\n  #####\n  output$plot <- shiny::renderPlot({\n    if (is.null(v$plot)) {\n      return()\n    }\n    live_plot()\n    # plot(v$plot,\n    #   col = c(\n    #     input$bgcolor,\n    #     input$ftcolor\n    #   )\n    # )\n  })\n\n  output$rendered <- shiny::reactive({\n    if (is.null(v$plot)) {\n      \"no\"\n    } else {\n      \"yes\"\n    }\n  })\n  \n  #####\n  #### Generating output\n  #####\n  \n  shiny::outputOptions(output, 'rendered', suspendWhenHidden = FALSE)\n  \n  # downloadHandler contains 2 arguments as functions, namely filename, content\n  output$save_svg <- shiny::downloadHandler(\n    filename = function() {\n      if (input$qr_type == \"text\") {\n        paste0(trim_link(input$link), \".svg\")\n      } else if (input$qr_type == \"wifi\") {\n        paste0(trim_link(input$ssid), \".svg\")\n      }\n    },\n    # content is a function with argument file. content writes the plot to the device\n    content = function(file) {\n      qrcode::generate_svg(\n        qrcode = v$plot,\n        foreground = input$ftcolor,\n        background = ifelse(input$transparent, \"none\", input$bgcolor),\n        filename = file, show = FALSE\n      )\n    }\n  )\n\n  # downloadHandler contains 2 arguments as functions, namely filename, content\n  output$save_png <- shiny::downloadHandler(\n    filename = function() {\n      if (input$qr_type == \"text\") {\n        paste0(trim_link(input$link), \".png\")\n      } else if (input$qr_type == \"wifi\") {\n        paste0(trim_link(input$ssid), \".png\")\n      }\n    },\n    # content is a function with argument file. content writes the plot to the device\n    content = function(file) {\n      png(filename = file)\n      live_plot()\n      dev.off()\n    }\n  )\n}\n","type":"text"},{"name":"ui.R","content":"ui <- shiny::fluidPage(\n  shiny::titlePanel(\"Generate your own QR code\",\n    windowTitle = \"QR code SVG/PNG export\"\n  ),\n  shiny::sidebarLayout(\n    shiny::sidebarPanel(\n      shiny::actionButton(\n        inputId = \"render\",\n        label = \"Create QR\",\n        icon = shiny::icon(\"qrcode\"), width = \"100%\"\n      ),\n      shiny::tags$hr(),\n      shiny::radioButtons(\n        inputId = \"qr_type\",\n        label = \"What kind of QR code?\",\n        selected = \"text\",\n        choices = list(\n          \"Standard (link)\" = \"text\",\n          \"Wifi credentials\" = \"wifi\"\n        )\n      ),\n      shiny::tags$hr(),\n      shiny::conditionalPanel(\n        condition = \"input.qr_type=='text'\",\n        shiny::textInput(\n          inputId = \"link\",\n          label = \"Enter Link here\",\n          value = \"https://agdamsbo.github.io/qr.live/\"\n        ),\n        shiny::radioButtons(\n          inputId = \"ecl\",\n          label = \"Error correction\",\n          selected = \"M\",\n          choices = list(\n            \"Low (7 %)\" = \"L\",\n            \"Medium (15 %)\" = \"M\",\n            \"Q (25 %)\" = \"Q\",\n            \"High (30 %)\" = \"H\"\n          )\n        )\n      ),\n      shiny::conditionalPanel(\n        condition = \"input.qr_type=='wifi'\",\n        shiny::textInput(\n          inputId = \"ssid\",\n          label = \"Network name (SSID)\",\n          value = \"hello\"\n        ),\n        shiny::textInput(\n          inputId = \"key\",\n          label = \"Password\",\n          placeholder = \"pass\"\n        ),\n        shiny::radioButtons(\n          inputId = \"encryption\",\n          label = \"Encryption\",\n          selected = \"WPA\",\n          choices = list(\n            \"WPA/WPA2/WPA3\" = \"WPA\",\n            \"WEP\" = \"WEP\",\n            \"None\" = \"no\"\n          )\n        ),\n        shiny::radioButtons(\n          inputId = \"hidden\",\n          label = \"Hidden?\",\n          selected = FALSE,\n          choices = list(\n            \"Yes\" = TRUE,\n            \"No\" = FALSE\n          )\n        ),\n        shiny::radioButtons(\n          inputId = \"ecl_wifi\",\n          label = \"Error correction\",\n          selected = \"L\",\n          choices = list(\n            \"Low (7 %)\" = \"L\",\n            \"Medium (15 %)\" = \"M\",\n            \"High (25 %)\" = \"Q\",\n            \"Extra High (30 %)\" = \"H\"\n          )\n        )\n      ),\n      shiny::tags$hr(),\n      #####\n      #### Add logo\n      #####\n      shiny::radioButtons(\n        inputId = \"logo_add\",\n        label = \"Add logo? (Slow with shinylive)\",\n        selected = \"n\",\n        choices = list(\n          \"Yes\" = \"y\",\n          \"No\" = \"n\"\n        )\n      ),\n      shiny::conditionalPanel(\n        condition = \"input.logo_add=='y'\",\n        shiny::fileInput(\n          inputId = \"logo\",\n          label = \"Upload logo file\",\n          multiple = FALSE,\n          accept = c(\n            \"png\",\n            \"svg\",\n            \"jpeg\",\n            \"jpg\"\n          )\n        ),\n        shiny::radioButtons(\n          inputId = \"logo_size\",\n          label = \"Logo size\",\n          selected = \"l\",\n          choices = list(\n            \"Small\" = \"s\",\n            \"Medium\" = \"m\",\n            \"Large\" = \"l\"\n          )\n        ),\n        shiny::radioButtons(\n          inputId = \"hjust\",\n          label = \"Horisontal position\",\n          selected = \"c\",\n          choices = list(\n            \"Right\" = \"r\",\n            \"Center\" = \"c\",\n            \"Left\" = \"l\"\n          )\n        ),\n        shiny::radioButtons(\n          inputId = \"vjust\",\n          label = \"Vertical position\",\n          selected = \"c\",\n          choices = list(\n            \"Top\" = \"t\",\n            \"Center\" = \"c\",\n            \"Buttom\" = \"b\"\n          )\n        )\n      ),\n      shiny::tags$hr(),\n      #####\n      #### Specify colors\n      #####\n      shiny::textInput(\n        inputId = \"bgcolor\",\n        label = \"Background Color\",\n        value = \"white\"\n      ),\n      shiny::radioButtons(\n        inputId = \"transparent\",\n        label = \"Transparent SVG Background\",\n        selected = FALSE,\n        choices = list(\n          \"Yes\" = TRUE,\n          \"No\" = FALSE\n        )\n      ),\n      shiny::textInput(\n        inputId = \"ftcolor\",\n        label = \"QR Color\",\n        value = \"black\"\n      ),\n      # shiny::h6(\"Use CSS colors. Use 'none' for transparent.\"),\n      shiny::tags$hr(),\n      shiny::h4(\"Choose output\"),\n      shiny::conditionalPanel(\n        condition = \"output.rendered=='no'\",\n        shiny::p(\"Please create QR before saving\")\n      ),\n      shiny::conditionalPanel(\n        condition = \"output.rendered=='yes'\",\n        shiny::downloadButton(\n          outputId = \"save_svg\",\n          label = \"SVG\",\n          icon = shiny::icon(\"vector-square\")\n        ),\n        shiny::downloadButton(\n          outputId = \"save_png\",\n          label = \"PNG\",\n          icon = shiny::icon(\"file-image\")\n        )\n      )\n    ),\n    shiny::mainPanel(\n      shiny::plotOutput(\"plot\")\n    )\n  )\n)\n","type":"text"}]
