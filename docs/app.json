[{"name":"server.R","content":"trim_link <- function(data) {\n  gsub(\n    \"\\\\_$\", \"\",\n    gsub(\n      \"\\\\_{2,}\", \"_\",\n      gsub(\"[^a-zA-Z0-9]\", \"_\", trimws(data))\n    )\n  )\n}\n\n\n\nserver <- function(input, output) {\n  # bslib::bs_themer()\n  \n  qr <- shiny::reactive({\n    qrcode::qr_code(trimws(input$link), ecl = \"M\")\n  })\n  \n  output$plot <- shiny::renderPlot({\n    plot(qr())\n  })\n\n  # downloadHandler contains 2 arguments as functions, namely filename, content\n  output$save_svg <- shiny::downloadHandler(\n    filename = function() {\n      paste0(trim_link(input$link), \".svg\")\n    },\n    # content is a function with argument file. content writes the plot to the device\n    content = function(file) {\n      qrcode::generate_svg(qrcode = qr(),\n                           # foreground = input$ftcolor,\n                           # background = input$bgcolor,\n                           filename = file,show = FALSE)\n    }\n  )\n  \n  # downloadHandler contains 2 arguments as functions, namely filename, content\n  output$save_png <- shiny::downloadHandler(\n    filename = function() {\n      paste0(trim_link(input$link), \".png\")\n    },\n    # content is a function with argument file. content writes the plot to the device\n    content = function(file) {\n      png(filename = file)\n      plot(qr())\n      dev.off()\n    }\n \n    \n  )\n}\n","type":"text"},{"name":"ui.R","content":"ui <- shiny::fluidPage(\n  shiny::titlePanel(\"Generate your own QR code\",\n    windowTitle = \"QR code SVG/PNG export\"\n  ),\n  shiny::sidebarLayout(\n    shiny::sidebarPanel(\n      shiny::textInput(\n        inputId = \"link\",\n        label = \"Enter Link here\", \n        value = \"https://agdamsbo.github.io/qr.live/\"\n      ),\n      shiny::tags$hr(),\n      # shiny::textInput(inputId = \"bgcolor\",\n      #           label = \"SVG Background Color\",\n      #           value = \"white\"),\n      # shiny::textInput(inputId = \"ftcolor\",\n      #           label = \"SVG QR Color\",\n      #           value = \"black\"),\n      # shiny::h6(\"Use CSS colors. Use 'none' for transparent.\"),\n      # shiny::tags$hr(),\n      shiny::downloadButton(outputId = \"save_svg\", \n                            label = \"Download SVG\"),\n      shiny::downloadButton(outputId = \"save_png\", \n                            label = \"Download PNG\")\n    ),\n    shiny::mainPanel(\n      shiny::plotOutput(\"plot\")\n    )\n  )\n)\n","type":"text"}]
